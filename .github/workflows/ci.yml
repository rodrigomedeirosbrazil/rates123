name: ci
on:
  workflow_dispatch:
    inputs:
      prNumber:
        description: 'PR Number'
        required: true
  schedule:
    - cron: "*/20 11-21 * * 1-3" # Every 20 minutes from 11am to 9pm UTC (8am to 6pm UTC-3), Monday to Wednesday

concurrency:
  group: 'ci-deploy'
  cancel-in-progress: true

jobs:
  get_data:
    runs-on: ubuntu-latest
    outputs:
      pr: ${{ steps.prCode.outputs.prCode }}
      branch: ${{ steps.prBranch.outputs.prBranch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get PR # Necessary to make sure the PR meets all the requirements
        id: prCode
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "prCode=$(gh pr list --limit 1 --search 'is:open is:pr draft:false label:ready label:qa-approved,no-qa-needs -label:conflicts -label:blocked -label:"changes requested" -label:incomplete -label:"needs review" -label:"tests failed" -label:"needs more info" -label:"question" -label:"lint error" review:approved sort:created-asc base:development ${{ github.event.inputs.prNumber }}' | grep -Eo "^[0-9]+" -m 1)" >> $GITHUB_OUTPUT
      - name: Get PR Branch
        id: prBranch
        if: steps.prCode.outputs.prCode != ''
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "prBranch=$(gh pr view ${{ steps.prCode.outputs.prCode }} --json headRefName --template {{.headRefName}})" >> $GITHUB_OUTPUT
      - name: Fetched data
        run: |
          echo "PR: ${{ steps.prCode.outputs.prCode }}"
          echo "Branch: ${{ steps.prBranch.outputs.prBranch }}"
      - name: No PR found with manual run
        if: ${{github.event_name == 'workflow_dispatch' && ! steps.prCode.outputs.prCode }}
        run: |
          echo "::error:: There's a problem trying to fetch the PR data"
          exit 1
      - name: No PR found with scheduled tun
        if: ${{github.event_name == 'schedule' && ! steps.prCode.outputs.prCode }}
        run: |
          echo "::notice:: No PR ready to be deployed..."

  update_branch:
    needs: [ get_data ]
    runs-on: ubuntu-latest
    if: needs.get_data.outputs.pr != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Update branch
        uses: actions/github-script@v4
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const { updatePullBranch } = require('.github/scripts/helpers');
            await updatePullBranch(github, context, ${{needs.get_data.outputs.pr}});

  run_tests:
    needs: [ get_data, update_branch ]
    if: needs.get_data.outputs.pr != ''
    runs-on: ubuntu-latest
    # Service container Mysql mysql
    services:
      # Label used to access the service container
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: 'secret'
          MYSQL_DATABASE: 'testing'
        ports:
          - 3306
        # Set health checks to wait until mysql database has started (it takes some seconds to start)
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      mongodb:
        image: mongo:latest
        env:
          MONGO_INITDB_DATABASE: 'tbnb_integrations_service'
          MONGO_INITDB_ROOT_USERNAME: 'root'
          MONGO_INITDB_ROOT_PASSWORD: 'root'
        ports:
          - 27017

    strategy:
      matrix:
        operating-system: [ ubuntu-latest ]
        php-versions: [ '8.2' ]
        dependency-stability: [ prefer-stable ]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.get_data.outputs.branch }}
      - uses: ./.github/actions/laravel-tests
        with:
          composer_auth: ${{ secrets.COMPOSER_AUTH }}
          branch: ${{ needs.get_data.outputs.branch }}
      - name: Add deploy failed label
        if: failure()
        uses: actions/github-script@v4
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          script: |
            const { addLabels } = require('.github/scripts/helpers');
            await addLabels(github, context, ${{ github.run_id }}, ["tests failed", "deploy failed"], ${{needs.get_data.outputs.pr}});

  deploy:
    needs: [ get_data, run_tests ]
    runs-on: ubuntu-latest
    if: needs.get_data.outputs.pr != '' && ! failure()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Merging PR
        uses: actions/github-script@v4
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const { mergePullRequest, updateMasterWithDevelopment } = require('.github/scripts/helpers');
            await mergePullRequest(github, context, ${{needs.get_data.outputs.pr}});
            await updateMasterWithDevelopment(github, context);
      - name: Deploying to production
        if: '! failure()'
        run: |
          echo "Deploying updates to production servers..."
          wget ${{ secrets.ENVOYER_PROD_DEPLOY_URL }}?branch=master
      - name: Add deploy failed label
        if: failure()
        uses: actions/github-script@v4
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          script: |
            const { addLabels } = require('.github/scripts/helpers');
            await addLabels(github, context, ${{ github.run_id }}, ["deploy failed"], ${{needs.get_data.outputs.pr}});
      - name: Remove deploy failed label
        if: '! failure()'
        uses: actions/github-script@v4
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          script: |
            const { removeLabel } = require('.github/scripts/helpers');
            await removeLabel(github, context, ${{ github.run_id }}, "deploy failed", ${{needs.get_data.outputs.pr}});
